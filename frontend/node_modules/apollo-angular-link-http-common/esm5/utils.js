import * as tslib_1 from "tslib";
import { Observable } from 'rxjs';
import { extractFiles } from 'extract-files';
export var fetch = function (req, httpClient) {
    var shouldUseBody = ['POST', 'PUT', 'PATCH'].indexOf(req.method.toUpperCase()) !== -1;
    var shouldStringify = function (param) {
        return ['variables', 'extensions'].indexOf(param.toLowerCase()) !== -1;
    };
    var isBatching = req.body.length;
    var shouldUseMultipart = req.options && req.options.useMultipart;
    var multipartInfo;
    if (shouldUseMultipart) {
        if (isBatching) {
            return new Observable(function (observer) {
                return observer.error(new Error('File upload is not available when combined with Batching'));
            });
        }
        if (!shouldUseBody) {
            return new Observable(function (observer) {
                return observer.error(new Error('File upload is not available when GET is used'));
            });
        }
        multipartInfo = extractFiles(req.body);
        shouldUseMultipart = !!multipartInfo.files.size;
    }
    // `body` for some, `params` for others
    var bodyOrParams = {};
    if (isBatching) {
        if (!shouldUseBody) {
            return new Observable(function (observer) {
                return observer.error(new Error('Batching is not available for GET requests'));
            });
        }
        bodyOrParams = {
            body: req.body,
        };
    }
    else {
        var body = shouldUseMultipart ? multipartInfo.clone : req.body;
        if (shouldUseBody) {
            bodyOrParams = {
                body: body,
            };
        }
        else {
            var params = Object.keys(req.body).reduce(function (obj, param) {
                var value = req.body[param];
                obj[param] = shouldStringify(param) ? JSON.stringify(value) : value;
                return obj;
            }, {});
            bodyOrParams = { params: params };
        }
    }
    if (shouldUseMultipart && shouldUseBody) {
        var form_1 = new FormData();
        form_1.append('operations', JSON.stringify(bodyOrParams.body));
        var map_1 = {};
        var files = multipartInfo.files;
        var i_1 = 0;
        files.forEach(function (paths) {
            map_1[++i_1] = paths;
        });
        form_1.append('map', JSON.stringify(map_1));
        i_1 = 0;
        files.forEach(function (_, file) {
            form_1.append(++i_1 + '', file, file.name);
        });
        bodyOrParams.body = form_1;
    }
    // create a request
    return httpClient.request(req.method, req.url, tslib_1.__assign({ observe: 'response', responseType: 'json', reportProgress: false }, bodyOrParams, req.options));
};
export var mergeHeaders = function (source, destination) {
    if (source && destination) {
        var merged = destination
            .keys()
            .reduce(function (headers, name) { return headers.set(name, destination.getAll(name)); }, source);
        return merged;
    }
    return destination || source;
};
export function prioritize() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    var picked = values.find(function (val) { return typeof val !== 'undefined'; });
    if (typeof picked === 'undefined') {
        return values[values.length - 1];
    }
    return picked;
}
//# sourceMappingURL=data:application/json;base64,